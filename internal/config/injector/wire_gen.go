// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"context"
	"github.com/trend-me/ai-prompt-builder/internal/config/connections"
	"github.com/trend-me/ai-prompt-builder/internal/config/properties"
	"github.com/trend-me/ai-prompt-builder/internal/delivery/controllers"
	"github.com/trend-me/ai-prompt-builder/internal/domain/interfaces"
	"github.com/trend-me/ai-prompt-builder/internal/domain/usecases"
	"github.com/trend-me/ai-prompt-builder/internal/integration/api"
	"github.com/trend-me/ai-prompt-builder/internal/integration/queue"
	"github.com/trend-me/golang-rabbitmq-lib/rabbitmq"
)

// Injectors from wire.go:

func InitializeConsumer() (func(context.Context) (chan error, error), error) {
	urlApiPromptRoadMapConfigExecution := NewUrlApiPromptRoadMapConfigExecution()
	apiPromptRoadMapConfigExecution := api.NewPromptRoadMapConfigExecution(urlApiPromptRoadMapConfigExecution)
	urlApiPromptRoadMapConfig := NewUrlApiPromptRoadMapConfig()
	apiPromptRoadMapConfig := api.NewPromptRoadMapConfig(urlApiPromptRoadMapConfig)
	urlApiValidation := NewUrlApiValidation()
	apiValidation := api.NewValidation(urlApiValidation)
	connection, err := connections.ConnectQueue()
	if err != nil {
		return nil, err
	}
	connectionAiPromptBuilder := NewQueueNameAiPromptBuilder(connection)
	queueAiRequester := queue.NewAiRequester(connectionAiPromptBuilder)
	useCase := usecases.NewUseCase(apiPromptRoadMapConfigExecution, apiPromptRoadMapConfig, apiValidation, queueAiRequester)
	controller := controllers.NewController(useCase)
	v := NewConsumer(controller, connectionAiPromptBuilder)
	return v, nil
}

// wire.go:

func NewQueueNameAiPromptBuilder(connection *rabbitmq.Connection) queue.ConnectionAiPromptBuilder {
	return rabbitmq.NewQueue(
		connection, properties.QueueNameAiPromptBuilder, rabbitmq.ContentTypeJson, properties.CreateQueueIfNX(), true,
		true,
	)
}

func NewConsumer(controller interfaces.Controller, connectionAiPromptBuilder queue.ConnectionAiPromptBuilder) func(context.Context) (chan error, error) {
	return func(ctx context.Context) (chan error, error) {
		return connectionAiPromptBuilder.Consume(ctx, controller.Handle)
	}
}

func NewUrlApiValidation() api.UrlApiValidation {
	return properties.UrlApiValidation
}

func NewUrlApiPromptRoadMapConfig() api.UrlApiPromptRoadMapConfig {
	return properties.UrlApiPromptRoadMapConfig
}

func NewUrlApiPromptRoadMapConfigExecution() api.UrlApiPromptRoadMapConfigExecution {
	return properties.UrlApiPromptRoadMapConfigExecution
}
