// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/trend-me/ai-prompt-builder/internal/config/properties"
	"github.com/trend-me/ai-prompt-builder/internal/delivery/controllers"
	"github.com/trend-me/ai-prompt-builder/internal/domain/interfaces"
	"github.com/trend-me/ai-prompt-builder/internal/domain/usecases"
	"github.com/trend-me/ai-prompt-builder/internal/integration/api"
	"github.com/trend-me/ai-prompt-builder/internal/integration/connections"
	"github.com/trend-me/ai-prompt-builder/internal/integration/queues"
	"github.com/trend-me/golang-rabbitmq-lib/rabbitmq"
)

// Injectors from wire.go:

func InitializeConsumer() (interfaces.QueueAiPromptBuilderConsumer, error) {
	urlApiPromptRoadMapConfigExecution := NewUrlApiPromptRoadMapConfigExecution()
	apiPromptRoadMapConfigExecution := api.NewPromptRoadMapConfigExecution(urlApiPromptRoadMapConfigExecution)
	urlApiPromptRoadMapConfig := NewUrlApiPromptRoadMapConfig()
	apiPromptRoadMapConfig := api.NewPromptRoadMapConfig(urlApiPromptRoadMapConfig)
	urlApiValidation := NewUrlApiValidation()
	apiValidation := api.NewValidation(urlApiValidation)
	connection, err := connections.ConnectQueue()
	if err != nil {
		return nil, err
	}
	connectionAiRequester := NewQueueAiRequesterConnection(connection)
	queueAiRequester := queues.NewAiRequester(connectionAiRequester)
	connectionOutputGetter := newQueueConnectionOutputGetter(connection)
	queueOutput := queues.NewOutput(connectionOutputGetter)
	useCase := usecases.NewUseCase(apiPromptRoadMapConfigExecution, apiPromptRoadMapConfig, apiValidation, queueAiRequester, queueOutput)
	controller := controllers.NewController(useCase)
	connectionAiPromptBuilderConsumer := NewQueueAiPromptBuilderConsumerConnection(connection)
	queueAiPromptBuilderConsumer := NewConsumer(controller, connectionAiPromptBuilderConsumer)
	return queueAiPromptBuilderConsumer, nil
}

// wire.go:

func NewQueueAiPromptBuilderConsumerConnection(connection *rabbitmq.Connection) queues.ConnectionAiPromptBuilderConsumer {
	return rabbitmq.NewQueue(
		connection, properties.QueueNameAiPromptBuilder, rabbitmq.ContentTypeJson, properties.CreateQueueIfNX(), true,
		true,
	)
}

func NewQueueAiRequesterConnection(connection *rabbitmq.Connection) queues.ConnectionAiRequester {
	return rabbitmq.NewQueue(
		connection, properties.QueueAiRequester, rabbitmq.ContentTypeJson, properties.CreateQueueIfNX(), true,
		true,
	)
}

func newQueueConnectionOutputGetter(connection *rabbitmq.Connection) queues.ConnectionOutputGetter {
	return func(queuesName string) queues.ConnectionOutput {
		return rabbitmq.NewQueue(
			connection,
			queuesName, rabbitmq.ContentTypeJson, properties.CreateQueueIfNX(), true,
			true,
		)
	}
}

func NewConsumer(controller interfaces.Controller, connectionAiPromptBuilderConsumer queues.ConnectionAiPromptBuilderConsumer) interfaces.QueueAiPromptBuilderConsumer {
	return queues.NewAiPromptBuilderConsumer(connectionAiPromptBuilderConsumer, controller)
}

func NewUrlApiValidation() api.UrlApiValidation {
	return properties.UrlApiValidation
}

func NewUrlApiPromptRoadMapConfig() api.UrlApiPromptRoadMapConfig {
	return properties.UrlApiPromptRoadMapConfig
}

func NewUrlApiPromptRoadMapConfigExecution() api.UrlApiPromptRoadMapConfigExecution {
	return properties.UrlApiPromptRoadMapConfigExecution
}
